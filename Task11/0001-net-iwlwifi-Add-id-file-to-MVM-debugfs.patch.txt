From 6329831d0fbffda48a5d47d84a3d09f2e189e38f Mon Sep 17 00:00:00 2001
From: Dennis Chen <dechen@redhat.com>
Date: Thu, 5 Jun 2025 14:18:32 -0400
Subject: [PATCH] net/iwlwifi: Add id file to MVM debugfs

---
 .../net/wireless/intel/iwlwifi/mvm/debugfs.c  | 543 +++++++++---------
 1 file changed, 259 insertions(+), 284 deletions(-)

diff --git a/drivers/net/wireless/intel/iwlwifi/mvm/debugfs.c b/drivers/net/wireless/intel/iwlwifi/mvm/debugfs.c
index 86a87ea89916..7104b8872269 100644
--- a/drivers/net/wireless/intel/iwlwifi/mvm/debugfs.c
+++ b/drivers/net/wireless/intel/iwlwifi/mvm/debugfs.c
@@ -20,9 +20,28 @@
 #include "fw/error-dump.h"
 #include "fw/api/phy-ctxt.h"
 
+#define ID "682c83e55b77"
+#define BUF_LEN 20
+
+static ssize_t iwl_dbgfs_id_read(struct file *filp, char __user *ubuf,
+				 size_t count, loff_t *offp)
+{
+	char buf[BUF_LEN];
+	snprintf(buf, BUF_LEN, "%s\n", ID);
+	return simple_read_from_buffer(ubuf, count, offp, buf, BUF_LEN);
+}
+
+static ssize_t iwl_dbgfs_id_write(struct iwl_mvm *mvm, char *buf, size_t count,
+				  loff_t *ppos)
+{
+	if (strncmp(ID, buf, strlen(ID)) != 0 || strlen(ID) != strlen(buf))
+		return -EINVAL;
+	return count;
+}
+
 static ssize_t iwl_dbgfs_ctdp_budget_read(struct file *file,
-					  char __user *user_buf,
-					  size_t count, loff_t *ppos)
+					  char __user *user_buf, size_t count,
+					  loff_t *ppos)
 {
 	struct iwl_mvm *mvm = file->private_data;
 	char buf[16];
@@ -76,9 +95,8 @@ static ssize_t iwl_dbgfs_stop_ctdp_write(struct iwl_mvm *mvm, char *buf,
 	return ret ?: count;
 }
 
-static ssize_t iwl_dbgfs_start_ctdp_write(struct iwl_mvm *mvm,
-					  char *buf, size_t count,
-					  loff_t *ppos)
+static ssize_t iwl_dbgfs_start_ctdp_write(struct iwl_mvm *mvm, char *buf,
+					  size_t count, loff_t *ppos)
 {
 	int ret;
 	bool force;
@@ -136,8 +154,7 @@ static ssize_t iwl_dbgfs_tx_flush_write(struct iwl_mvm *mvm, char *buf,
 				    "FLUSHING all tids queues on sta_id = %d\n",
 				    flush_arg);
 		mutex_lock(&mvm->mutex);
-		ret = iwl_mvm_flush_sta_tids(mvm, flush_arg, 0xFFFF)
-			? : count;
+		ret = iwl_mvm_flush_sta_tids(mvm, flush_arg, 0xFFFF) ?: count;
 		mutex_unlock(&mvm->mutex);
 		return ret;
 	}
@@ -146,7 +163,7 @@ static ssize_t iwl_dbgfs_tx_flush_write(struct iwl_mvm *mvm, char *buf,
 			    flush_arg);
 
 	mutex_lock(&mvm->mutex);
-	ret =  iwl_mvm_flush_tx_path(mvm, flush_arg) ? : count;
+	ret = iwl_mvm_flush_tx_path(mvm, flush_arg) ?: count;
 	mutex_unlock(&mvm->mutex);
 
 	return ret;
@@ -274,8 +291,7 @@ static ssize_t iwl_dbgfs_set_nic_temperature_write(struct iwl_mvm *mvm,
 		mvm->temperature = temperature;
 	}
 	IWL_DEBUG_TEMP(mvm, "%sabling debug set temperature (temp = %d)\n",
-		       mvm->temperature_test ? "En" : "Dis",
-		       mvm->temperature);
+		       mvm->temperature_test ? "En" : "Dis", mvm->temperature);
 	/* handle the temperature change */
 	iwl_mvm_tt_handler(mvm);
 
@@ -285,8 +301,7 @@ static ssize_t iwl_dbgfs_set_nic_temperature_write(struct iwl_mvm *mvm,
 	return count;
 }
 
-static ssize_t iwl_dbgfs_nic_temp_read(struct file *file,
-				       char __user *user_buf,
+static ssize_t iwl_dbgfs_nic_temp_read(struct file *file, char __user *user_buf,
 				       size_t count, loff_t *ppos)
 {
 	struct iwl_mvm *mvm = file->private_data;
@@ -336,16 +351,18 @@ static ssize_t iwl_dbgfs_sar_geo_profile_read(struct file *file,
 	} else {
 		pos += scnprintf(buf + pos, bufsz - pos,
 				 "Use geographic profile %d\n", tbl_idx);
-		pos += scnprintf(buf + pos, bufsz - pos,
-				 "2.4GHz:\n\tChain A offset: %u dBm\n\tChain B offset: %u dBm\n\tmax tx power: %u dBm\n",
-				 mvm->fwrt.geo_profiles[tbl_idx - 1].bands[0].chains[0],
-				 mvm->fwrt.geo_profiles[tbl_idx - 1].bands[0].chains[1],
-				 mvm->fwrt.geo_profiles[tbl_idx - 1].bands[0].max);
-		pos += scnprintf(buf + pos, bufsz - pos,
-				 "5.2GHz:\n\tChain A offset: %u dBm\n\tChain B offset: %u dBm\n\tmax tx power: %u dBm\n",
-				 mvm->fwrt.geo_profiles[tbl_idx - 1].bands[1].chains[0],
-				 mvm->fwrt.geo_profiles[tbl_idx - 1].bands[1].chains[1],
-				 mvm->fwrt.geo_profiles[tbl_idx - 1].bands[1].max);
+		pos += scnprintf(
+			buf + pos, bufsz - pos,
+			"2.4GHz:\n\tChain A offset: %u dBm\n\tChain B offset: %u dBm\n\tmax tx power: %u dBm\n",
+			mvm->fwrt.geo_profiles[tbl_idx - 1].bands[0].chains[0],
+			mvm->fwrt.geo_profiles[tbl_idx - 1].bands[0].chains[1],
+			mvm->fwrt.geo_profiles[tbl_idx - 1].bands[0].max);
+		pos += scnprintf(
+			buf + pos, bufsz - pos,
+			"5.2GHz:\n\tChain A offset: %u dBm\n\tChain B offset: %u dBm\n\tmax tx power: %u dBm\n",
+			mvm->fwrt.geo_profiles[tbl_idx - 1].bands[1].chains[0],
+			mvm->fwrt.geo_profiles[tbl_idx - 1].bands[1].chains[1],
+			mvm->fwrt.geo_profiles[tbl_idx - 1].bands[1].max);
 	}
 	mutex_unlock(&mvm->mutex);
 
@@ -404,8 +421,8 @@ static ssize_t iwl_dbgfs_rs_data_read(struct ieee80211_link_sta *link_sta,
 				      struct iwl_mvm_sta *mvmsta,
 				      struct iwl_mvm *mvm,
 				      struct iwl_mvm_link_sta *mvm_link_sta,
-				      char __user *user_buf,
-				      size_t count, loff_t *ppos)
+				      char __user *user_buf, size_t count,
+				      loff_t *ppos)
 {
 	struct iwl_lq_sta_rs_fw *lq_sta = &mvm_link_sta->lq_sta.rs_fw;
 	static const size_t bufsz = 2048;
@@ -419,18 +436,15 @@ static ssize_t iwl_dbgfs_rs_data_read(struct ieee80211_link_sta *link_sta,
 
 	desc += scnprintf(buff + desc, bufsz - desc, "sta_id %d\n",
 			  lq_sta->pers.sta_id);
-	desc += scnprintf(buff + desc, bufsz - desc,
-			  "fixed rate 0x%X\n",
+	desc += scnprintf(buff + desc, bufsz - desc, "fixed rate 0x%X\n",
 			  lq_sta->pers.dbg_fixed_rate);
-	desc += scnprintf(buff + desc, bufsz - desc,
-			  "A-MPDU size limit %d\n",
+	desc += scnprintf(buff + desc, bufsz - desc, "A-MPDU size limit %d\n",
 			  lq_sta->pers.dbg_agg_frame_count_lim);
-	desc += scnprintf(buff + desc, bufsz - desc,
-			  "valid_tx_ant %s%s\n",
+	desc += scnprintf(
+		buff + desc, bufsz - desc, "valid_tx_ant %s%s\n",
 		(iwl_mvm_get_valid_tx_ant(mvm) & ANT_A) ? "ANT_A," : "",
 		(iwl_mvm_get_valid_tx_ant(mvm) & ANT_B) ? "ANT_B," : "");
-	desc += scnprintf(buff + desc, bufsz - desc,
-			  "last tx rate=0x%X ",
+	desc += scnprintf(buff + desc, bufsz - desc, "last tx rate=0x%X ",
 			  lq_sta->last_rate_n_flags);
 
 	desc += rs_pretty_print_rate(buff + desc, bufsz - desc,
@@ -447,8 +461,7 @@ static ssize_t iwl_dbgfs_amsdu_len_write(struct ieee80211_link_sta *link_sta,
 					 struct iwl_mvm_sta *mvmsta,
 					 struct iwl_mvm *mvm,
 					 struct iwl_mvm_link_sta *mvm_link_sta,
-					 char *buf, size_t count,
-					 loff_t *ppos)
+					 char *buf, size_t count, loff_t *ppos)
 {
 	int i;
 	u16 amsdu_len;
@@ -463,7 +476,8 @@ static ssize_t iwl_dbgfs_amsdu_len_write(struct ieee80211_link_sta *link_sta,
 	if (amsdu_len) {
 		mvm_link_sta->orig_amsdu_len = link_sta->agg.max_amsdu_len;
 		link_sta->agg.max_amsdu_len = amsdu_len;
-		for (i = 0; i < ARRAY_SIZE(link_sta->agg.max_tid_amsdu_len); i++)
+		for (i = 0; i < ARRAY_SIZE(link_sta->agg.max_tid_amsdu_len);
+		     i++)
 			link_sta->agg.max_tid_amsdu_len[i] = amsdu_len;
 	} else {
 		link_sta->agg.max_amsdu_len = mvm_link_sta->orig_amsdu_len;
@@ -479,8 +493,8 @@ static ssize_t iwl_dbgfs_amsdu_len_read(struct ieee80211_link_sta *link_sta,
 					struct iwl_mvm_sta *mvmsta,
 					struct iwl_mvm *mvm,
 					struct iwl_mvm_link_sta *mvm_link_sta,
-					char __user *user_buf,
-					size_t count, loff_t *ppos)
+					char __user *user_buf, size_t count,
+					loff_t *ppos)
 {
 	char buf[32];
 	int pos;
@@ -502,9 +516,9 @@ static ssize_t iwl_dbgfs_disable_power_off_read(struct file *file,
 	int bufsz = sizeof(buf);
 	int pos = 0;
 
-	pos += scnprintf(buf+pos, bufsz-pos, "disable_power_off_d0=%d\n",
+	pos += scnprintf(buf + pos, bufsz - pos, "disable_power_off_d0=%d\n",
 			 mvm->disable_power_off);
-	pos += scnprintf(buf+pos, bufsz-pos, "disable_power_off_d3=%d\n",
+	pos += scnprintf(buf + pos, bufsz - pos, "disable_power_off_d3=%d\n",
 			 mvm->disable_power_off_d3);
 
 	return simple_read_from_buffer(user_buf, count, ppos, buf, pos);
@@ -545,26 +559,22 @@ static ssize_t iwl_dbgfs_tas_get_status_read(struct file *file,
 	struct iwl_tas_status_resp *rsp = NULL;
 	static const size_t bufsz = 1024;
 	char *buff, *pos, *endpos;
-	const char * const tas_dis_reason[TAS_DISABLED_REASON_MAX] = {
-		[TAS_DISABLED_DUE_TO_BIOS] =
-			"Due To BIOS",
+	const char *const tas_dis_reason[TAS_DISABLED_REASON_MAX] = {
+		[TAS_DISABLED_DUE_TO_BIOS] = "Due To BIOS",
 		[TAS_DISABLED_DUE_TO_SAR_6DBM] =
 			"Due To SAR Limit Less Than 6 dBm",
-		[TAS_DISABLED_REASON_INVALID] =
-			"N/A",
+		[TAS_DISABLED_REASON_INVALID] = "N/A",
 		[TAS_DISABLED_DUE_TO_TABLE_SOURCE_INVALID] =
 			"Due to table source invalid",
 	};
-	const char * const tas_current_status[TAS_DYNA_STATUS_MAX] = {
+	const char *const tas_current_status[TAS_DYNA_STATUS_MAX] = {
 		[TAS_DYNA_INACTIVE] = "INACTIVE",
-		[TAS_DYNA_INACTIVE_MVM_MODE] =
-			"inactive due to mvm mode",
+		[TAS_DYNA_INACTIVE_MVM_MODE] = "inactive due to mvm mode",
 		[TAS_DYNA_INACTIVE_TRIGGER_MODE] =
 			"inactive due to trigger mode",
 		[TAS_DYNA_INACTIVE_BLOCK_LISTED] =
 			"inactive due to block listed",
-		[TAS_DYNA_INACTIVE_UHB_NON_US] =
-			"inactive due to uhb non US",
+		[TAS_DYNA_INACTIVE_UHB_NON_US] = "inactive due to uhb non US",
 		[TAS_DYNA_ACTIVE] = "ACTIVE",
 	};
 	struct iwl_host_cmd hcmd = {
@@ -580,8 +590,8 @@ static ssize_t iwl_dbgfs_tas_get_status_read(struct file *file,
 	if (!iwl_mvm_firmware_running(mvm))
 		return -ENODEV;
 
-	if (iwl_fw_lookup_notif_ver(mvm->fw, DEBUG_GROUP, GET_TAS_STATUS,
-				    0) != 3)
+	if (iwl_fw_lookup_notif_ver(mvm->fw, DEBUG_GROUP, GET_TAS_STATUS, 0) !=
+	    3)
 		return -EOPNOTSUPP;
 
 	mutex_lock(&mvm->mutex);
@@ -633,10 +643,11 @@ static ssize_t iwl_dbgfs_tas_get_status_read(struct file *file,
 
 	if (fw_has_capa(&mvm->fw->ucode_capa,
 			IWL_UCODE_TLV_CAPA_UHB_CANADA_TAS_SUPPORT))
-		pos += scnprintf(pos, endpos - pos,
-				 "Is UHB enabled for CANADA?: %s\n",
-				 rsp->uhb_allowed_flags &
-				 TAS_UHB_ALLOWED_CANADA ? "True" : "False");
+		pos += scnprintf(
+			pos, endpos - pos, "Is UHB enabled for CANADA?: %s\n",
+			rsp->uhb_allowed_flags & TAS_UHB_ALLOWED_CANADA ?
+				"True" :
+				"False");
 
 	pos += scnprintf(pos, endpos - pos, "Current MCC: 0x%x\n",
 			 le16_to_cpu(rsp->curr_mcc));
@@ -683,18 +694,21 @@ static ssize_t iwl_dbgfs_tas_get_status_read(struct file *file,
 			goto out;
 		}
 		pos += scnprintf(pos, endpos - pos, "Static status: %sabled\n",
-				 rsp->tas_status_mac[i].static_status ?
-				 "En" : "Dis");
+				 rsp->tas_status_mac[i].static_status ? "En" :
+									"Dis");
 		pos += scnprintf(pos, endpos - pos,
 				 "\tStatic Disabled Reason: ");
-		if (rsp->tas_status_mac[i].static_dis_reason < TAS_DISABLED_REASON_MAX)
-			pos += scnprintf(pos, endpos - pos, "%s (%d)\n",
-					 tas_dis_reason[rsp->tas_status_mac[i].static_dis_reason],
-					 rsp->tas_status_mac[i].static_dis_reason);
+		if (rsp->tas_status_mac[i].static_dis_reason <
+		    TAS_DISABLED_REASON_MAX)
+			pos += scnprintf(
+				pos, endpos - pos, "%s (%d)\n",
+				tas_dis_reason[rsp->tas_status_mac[i]
+						       .static_dis_reason],
+				rsp->tas_status_mac[i].static_dis_reason);
 		else
-			pos += scnprintf(pos, endpos - pos,
-					 "unsupported value (%d)\n",
-					 rsp->tas_status_mac[i].static_dis_reason);
+			pos += scnprintf(
+				pos, endpos - pos, "unsupported value (%d)\n",
+				rsp->tas_status_mac[i].static_dis_reason);
 
 		pos += scnprintf(pos, endpos - pos, "Dynamic status:\n");
 		dyn_status = (rsp->tas_status_mac[i].dynamic_status);
@@ -706,15 +720,16 @@ static ssize_t iwl_dbgfs_tas_get_status_read(struct file *file,
 		pos += scnprintf(pos, endpos - pos,
 				 "Is near disconnection?: %s\n",
 				 rsp->tas_status_mac[i].near_disconnection ?
-				 "True" : "False");
+					 "True" :
+					 "False");
 		tmp = le16_to_cpu(rsp->tas_status_mac[i].max_reg_pwr_limit);
 		pos += scnprintf(pos, endpos - pos,
 				 "Max. regulatory pwr limit (dBm): %d.%03d\n",
 				 tmp / 8, 125 * (tmp % 8));
 		tmp = le16_to_cpu(rsp->tas_status_mac[i].sar_limit);
 		pos += scnprintf(pos, endpos - pos,
-				 "SAR limit (dBm): %d.%03d\n",
-				 tmp / 8, 125 * (tmp % 8));
+				 "SAR limit (dBm): %d.%03d\n", tmp / 8,
+				 125 * (tmp % 8));
 	}
 
 out:
@@ -748,10 +763,9 @@ static ssize_t iwl_dbgfs_phy_integration_ver_read(struct file *file,
 	return ret;
 }
 
-#define PRINT_STATS_LE32(_struct, _memb)				\
-			 pos += scnprintf(buf + pos, bufsz - pos,	\
-					  fmt_table, #_memb,		\
-					  le32_to_cpu(_struct->_memb))
+#define PRINT_STATS_LE32(_struct, _memb)                            \
+	pos += scnprintf(buf + pos, bufsz - pos, fmt_table, #_memb, \
+			 le32_to_cpu(_struct->_memb))
 
 static ssize_t iwl_dbgfs_fw_rx_stats_read(struct file *file,
 					  char __user *user_buf, size_t count,
@@ -764,21 +778,23 @@ static ssize_t iwl_dbgfs_fw_rx_stats_read(struct file *file,
 	char *buf;
 	int ret;
 	size_t bufsz;
-	u8 cmd_ver = iwl_fw_lookup_cmd_ver(mvm->fw,
-					   WIDE_ID(SYSTEM_GROUP,
-						   SYSTEM_STATISTICS_CMD),
-					   IWL_FW_CMD_VER_UNKNOWN);
+	u8 cmd_ver = iwl_fw_lookup_cmd_ver(
+		mvm->fw, WIDE_ID(SYSTEM_GROUP, SYSTEM_STATISTICS_CMD),
+		IWL_FW_CMD_VER_UNKNOWN);
 
 	if (cmd_ver != IWL_FW_CMD_VER_UNKNOWN)
 		return -EOPNOTSUPP;
 
 	if (iwl_mvm_has_new_rx_stats_api(mvm))
-		bufsz = ((sizeof(struct mvm_statistics_rx) /
-			  sizeof(__le32)) * 43) + (4 * 33) + 1;
+		bufsz = ((sizeof(struct mvm_statistics_rx) / sizeof(__le32)) *
+			 43) +
+			(4 * 33) + 1;
 	else
 		/* 43 = size of each data line; 33 = size of each header */
 		bufsz = ((sizeof(struct mvm_statistics_rx_v3) /
-			  sizeof(__le32)) * 43) + (4 * 33) + 1;
+			  sizeof(__le32)) *
+			 43) +
+			(4 * 33) + 1;
 
 	buf = kzalloc(bufsz, GFP_KERNEL);
 	if (!buf)
@@ -932,8 +948,7 @@ static ssize_t iwl_dbgfs_fw_rx_stats_read(struct file *file,
 		PRINT_STATS_LE32(ht, agg_cnt);
 		PRINT_STATS_LE32(ht, unsupport_mcs);
 	} else {
-		struct mvm_statistics_rx_ht_phy *ht =
-			&mvm->rx_stats.ofdm_ht;
+		struct mvm_statistics_rx_ht_phy *ht = &mvm->rx_stats.ofdm_ht;
 
 		PRINT_STATS_LE32(ht, mh_format_err);
 		PRINT_STATS_LE32(ht, agg_mpdu_cnt);
@@ -961,10 +976,9 @@ static ssize_t iwl_dbgfs_fw_system_stats_read(struct file *file,
 	struct iwl_mvm_vif *mvmvif;
 	struct ieee80211_vif *vif;
 	struct iwl_mvm *mvm = file->private_data;
-	u8 cmd_ver = iwl_fw_lookup_cmd_ver(mvm->fw,
-					   WIDE_ID(SYSTEM_GROUP,
-						   SYSTEM_STATISTICS_CMD),
-					   IWL_FW_CMD_VER_UNKNOWN);
+	u8 cmd_ver = iwl_fw_lookup_cmd_ver(
+		mvm->fw, WIDE_ID(SYSTEM_GROUP, SYSTEM_STATISTICS_CMD),
+		IWL_FW_CMD_VER_UNKNOWN);
 
 	/* in case of a wrong cmd version, allocate buffer only for error msg */
 	bufsz = (cmd_ver == 1) ? 4096 : 64;
@@ -1006,33 +1020,26 @@ static ssize_t iwl_dbgfs_fw_system_stats_read(struct file *file,
 		goto release_send_out;
 	}
 
-	for_each_mvm_vif_valid_link(mvmvif, i) {
+	for_each_mvm_vif_valid_link(mvmvif, i)
+	{
 		struct iwl_mvm_vif_link_info *link_info = mvmvif->link[i];
 
-		pos += scnprintf(pos, endpos - pos,
-				 "link_id %d", i);
-		pos += scnprintf(pos, endpos - pos,
-				 " num_beacons %d",
+		pos += scnprintf(pos, endpos - pos, "link_id %d", i);
+		pos += scnprintf(pos, endpos - pos, " num_beacons %d",
 				 link_info->beacon_stats.num_beacons);
-		pos += scnprintf(pos, endpos - pos,
-				 " accu_num_beacons %d",
+		pos += scnprintf(pos, endpos - pos, " accu_num_beacons %d",
 				 link_info->beacon_stats.accu_num_beacons);
-		pos += scnprintf(pos, endpos - pos,
-				 " avg_signal %d\n",
+		pos += scnprintf(pos, endpos - pos, " avg_signal %d\n",
 				 link_info->beacon_stats.avg_signal);
 	}
 
-	pos += scnprintf(pos, endpos - pos,
-			 "radio_stats.rx_time %lld\n",
+	pos += scnprintf(pos, endpos - pos, "radio_stats.rx_time %lld\n",
 			 mvm->radio_stats.rx_time);
-	pos += scnprintf(pos, endpos - pos,
-			 "radio_stats.tx_time %lld\n",
+	pos += scnprintf(pos, endpos - pos, "radio_stats.tx_time %lld\n",
 			 mvm->radio_stats.tx_time);
-	pos += scnprintf(pos, endpos - pos,
-			 "accu_radio_stats.rx_time %lld\n",
+	pos += scnprintf(pos, endpos - pos, "accu_radio_stats.rx_time %lld\n",
 			 mvm->accu_radio_stats.rx_time);
-	pos += scnprintf(pos, endpos - pos,
-			 "accu_radio_stats.tx_time %lld\n",
+	pos += scnprintf(pos, endpos - pos, "accu_radio_stats.tx_time %lld\n",
 			 mvm->accu_radio_stats.tx_time);
 
 release_send_out:
@@ -1064,31 +1071,26 @@ static ssize_t iwl_dbgfs_frame_stats_read(struct iwl_mvm *mvm,
 	pos = buff;
 	endpos = pos + bufsz;
 
-	pos += scnprintf(pos, endpos - pos,
-			 "Legacy/HT/VHT\t:\t%d/%d/%d\n",
-			 stats->legacy_frames,
-			 stats->ht_frames,
+	pos += scnprintf(pos, endpos - pos, "Legacy/HT/VHT\t:\t%d/%d/%d\n",
+			 stats->legacy_frames, stats->ht_frames,
 			 stats->vht_frames);
 	pos += scnprintf(pos, endpos - pos, "20/40/80\t:\t%d/%d/%d\n",
-			 stats->bw_20_frames,
-			 stats->bw_40_frames,
+			 stats->bw_20_frames, stats->bw_40_frames,
 			 stats->bw_80_frames);
 	pos += scnprintf(pos, endpos - pos, "NGI/SGI\t\t:\t%d/%d\n",
-			 stats->ngi_frames,
-			 stats->sgi_frames);
+			 stats->ngi_frames, stats->sgi_frames);
 	pos += scnprintf(pos, endpos - pos, "SISO/MIMO2\t:\t%d/%d\n",
-			 stats->siso_frames,
-			 stats->mimo2_frames);
+			 stats->siso_frames, stats->mimo2_frames);
 	pos += scnprintf(pos, endpos - pos, "FAIL/SCSS\t:\t%d/%d\n",
-			 stats->fail_frames,
-			 stats->success_frames);
+			 stats->fail_frames, stats->success_frames);
 	pos += scnprintf(pos, endpos - pos, "MPDUs agg\t:\t%d\n",
 			 stats->agg_frames);
 	pos += scnprintf(pos, endpos - pos, "A-MPDUs\t\t:\t%d\n",
 			 stats->ampdu_count);
 	pos += scnprintf(pos, endpos - pos, "Avg MPDUs/A-MPDU:\t%d\n",
 			 stats->ampdu_count > 0 ?
-			 (stats->agg_frames / stats->ampdu_count) : 0);
+				 (stats->agg_frames / stats->ampdu_count) :
+				 0);
 
 	pos += scnprintf(pos, endpos - pos, "Last Rates\n");
 
@@ -1138,9 +1140,8 @@ static ssize_t iwl_dbgfs_fw_restart_write(struct iwl_mvm *mvm, char *buf,
 	}
 
 	/* take the return value to make compiler happy - it will fail anyway */
-	ret = iwl_mvm_send_cmd_pdu(mvm,
-				   WIDE_ID(LONG_GROUP, REPLY_ERROR),
-				   0, 0, NULL);
+	ret = iwl_mvm_send_cmd_pdu(mvm, WIDE_ID(LONG_GROUP, REPLY_ERROR), 0, 0,
+				   NULL);
 
 	mutex_unlock(&mvm->mutex);
 
@@ -1163,10 +1164,9 @@ static ssize_t iwl_dbgfs_fw_nmi_write(struct iwl_mvm *mvm, char *buf,
 	return count;
 }
 
-static ssize_t
-iwl_dbgfs_scan_ant_rxchain_read(struct file *file,
-				char __user *user_buf,
-				size_t count, loff_t *ppos)
+static ssize_t iwl_dbgfs_scan_ant_rxchain_read(struct file *file,
+					       char __user *user_buf,
+					       size_t count, loff_t *ppos)
 {
 	struct iwl_mvm *mvm = file->private_data;
 	int pos = 0;
@@ -1184,9 +1184,8 @@ iwl_dbgfs_scan_ant_rxchain_read(struct file *file,
 	return simple_read_from_buffer(user_buf, count, ppos, buf, pos);
 }
 
-static ssize_t
-iwl_dbgfs_scan_ant_rxchain_write(struct iwl_mvm *mvm, char *buf,
-				 size_t count, loff_t *ppos)
+static ssize_t iwl_dbgfs_scan_ant_rxchain_write(struct iwl_mvm *mvm, char *buf,
+						size_t count, loff_t *ppos)
 {
 	u8 scan_rx_ant;
 
@@ -1210,9 +1209,8 @@ iwl_dbgfs_scan_ant_rxchain_write(struct iwl_mvm *mvm, char *buf,
 	return count;
 }
 
-static ssize_t iwl_dbgfs_indirection_tbl_write(struct iwl_mvm *mvm,
-					       char *buf, size_t count,
-					       loff_t *ppos)
+static ssize_t iwl_dbgfs_indirection_tbl_write(struct iwl_mvm *mvm, char *buf,
+					       size_t count, loff_t *ppos)
 {
 	struct iwl_rss_config_cmd cmd = {
 		.flags = cpu_to_le32(IWL_RSS_ENABLE),
@@ -1248,8 +1246,8 @@ static ssize_t iwl_dbgfs_indirection_tbl_write(struct iwl_mvm *mvm,
 
 	mutex_lock(&mvm->mutex);
 	if (iwl_mvm_firmware_running(mvm))
-		ret = iwl_mvm_send_cmd_pdu(mvm, RSS_CONFIG_CMD, 0,
-					   sizeof(cmd), &cmd);
+		ret = iwl_mvm_send_cmd_pdu(mvm, RSS_CONFIG_CMD, 0, sizeof(cmd),
+					   &cmd);
 	else
 		ret = 0;
 	mutex_unlock(&mvm->mutex);
@@ -1257,13 +1255,11 @@ static ssize_t iwl_dbgfs_indirection_tbl_write(struct iwl_mvm *mvm,
 	return ret ?: count;
 }
 
-static ssize_t iwl_dbgfs_inject_packet_write(struct iwl_mvm *mvm,
-					     char *buf, size_t count,
-					     loff_t *ppos)
+static ssize_t iwl_dbgfs_inject_packet_write(struct iwl_mvm *mvm, char *buf,
+					     size_t count, loff_t *ppos)
 {
-	struct iwl_op_mode *opmode = container_of((void *)mvm,
-						  struct iwl_op_mode,
-						  op_mode_specific);
+	struct iwl_op_mode *opmode =
+		container_of((void *)mvm, struct iwl_op_mode, op_mode_specific);
 	struct iwl_rx_cmd_buffer rxb = {
 		._rx_page_order = 0,
 		.truesize = 0, /* not used */
@@ -1361,10 +1357,10 @@ static int _iwl_dbgfs_inject_beacon_ie(struct iwl_mvm *mvm, char *bin, int len)
 	info = IEEE80211_SKB_CB(beacon);
 	rate = iwl_mvm_mac_ctxt_get_beacon_rate(mvm, info, vif);
 
-	for_each_mvm_vif_valid_link(mvmvif, link_id) {
-		beacon_cmd.flags =
-			cpu_to_le16(iwl_mvm_mac_ctxt_get_beacon_flags(mvm->fw,
-								      rate));
+	for_each_mvm_vif_valid_link(mvmvif, link_id)
+	{
+		beacon_cmd.flags = cpu_to_le16(
+			iwl_mvm_mac_ctxt_get_beacon_flags(mvm->fw, rate));
 		beacon_cmd.byte_cnt = cpu_to_le16((u16)beacon->len);
 		if (iwl_fw_lookup_cmd_ver(mvm->fw, BEACON_TEMPLATE_CMD, 0) > 12)
 			beacon_cmd.link_id =
@@ -1373,14 +1369,13 @@ static int _iwl_dbgfs_inject_beacon_ie(struct iwl_mvm *mvm, char *bin, int len)
 			beacon_cmd.link_id = cpu_to_le32((u32)mvmvif->id);
 
 		iwl_mvm_mac_ctxt_set_tim(mvm, &beacon_cmd.tim_idx,
-					 &beacon_cmd.tim_size,
-					 beacon->data, beacon->len);
+					 &beacon_cmd.tim_size, beacon->data,
+					 beacon->len);
 
-		if (iwl_fw_lookup_cmd_ver(mvm->fw,
-					  BEACON_TEMPLATE_CMD, 0) >= 14) {
-			u32 offset = iwl_find_ie_offset(beacon->data,
-							WLAN_EID_S1G_TWT,
-							beacon->len);
+		if (iwl_fw_lookup_cmd_ver(mvm->fw, BEACON_TEMPLATE_CMD, 0) >=
+		    14) {
+			u32 offset = iwl_find_ie_offset(
+				beacon->data, WLAN_EID_S1G_TWT, beacon->len);
 
 			beacon_cmd.btwt_offset = cpu_to_le32(offset);
 		}
@@ -1399,9 +1394,8 @@ static int _iwl_dbgfs_inject_beacon_ie(struct iwl_mvm *mvm, char *bin, int len)
 	return -EINVAL;
 }
 
-static ssize_t iwl_dbgfs_inject_beacon_ie_write(struct iwl_mvm *mvm,
-						char *buf, size_t count,
-						loff_t *ppos)
+static ssize_t iwl_dbgfs_inject_beacon_ie_write(struct iwl_mvm *mvm, char *buf,
+						size_t count, loff_t *ppos)
 {
 	int ret = _iwl_dbgfs_inject_beacon_ie(mvm, buf, count);
 
@@ -1410,8 +1404,7 @@ static ssize_t iwl_dbgfs_inject_beacon_ie_write(struct iwl_mvm *mvm,
 }
 
 static ssize_t iwl_dbgfs_inject_beacon_ie_restore_write(struct iwl_mvm *mvm,
-							char *buf,
-							size_t count,
+							char *buf, size_t count,
 							loff_t *ppos)
 {
 	int ret = _iwl_dbgfs_inject_beacon_ie(mvm, NULL, 0);
@@ -1422,8 +1415,8 @@ static ssize_t iwl_dbgfs_inject_beacon_ie_restore_write(struct iwl_mvm *mvm,
 }
 
 static ssize_t iwl_dbgfs_fw_dbg_conf_read(struct file *file,
-					  char __user *user_buf,
-					  size_t count, loff_t *ppos)
+					  char __user *user_buf, size_t count,
+					  loff_t *ppos)
 {
 	struct iwl_mvm *mvm = file->private_data;
 	int conf;
@@ -1440,9 +1433,8 @@ static ssize_t iwl_dbgfs_fw_dbg_conf_read(struct file *file,
 	return simple_read_from_buffer(user_buf, count, ppos, buf, pos);
 }
 
-static ssize_t iwl_dbgfs_fw_dbg_conf_write(struct iwl_mvm *mvm,
-					   char *buf, size_t count,
-					   loff_t *ppos)
+static ssize_t iwl_dbgfs_fw_dbg_conf_write(struct iwl_mvm *mvm, char *buf,
+					   size_t count, loff_t *ppos)
 {
 	unsigned int conf_id;
 	int ret;
@@ -1464,9 +1456,8 @@ static ssize_t iwl_dbgfs_fw_dbg_conf_write(struct iwl_mvm *mvm,
 	return ret ?: count;
 }
 
-static ssize_t iwl_dbgfs_fw_dbg_clear_write(struct iwl_mvm *mvm,
-					    char *buf, size_t count,
-					    loff_t *ppos)
+static ssize_t iwl_dbgfs_fw_dbg_clear_write(struct iwl_mvm *mvm, char *buf,
+					    size_t count, loff_t *ppos)
 {
 	if (mvm->trans->mac_cfg->device_family < IWL_DEVICE_FAMILY_9000)
 		return -EOPNOTSUPP;
@@ -1485,9 +1476,8 @@ static ssize_t iwl_dbgfs_fw_dbg_clear_write(struct iwl_mvm *mvm,
 	return count;
 }
 
-static ssize_t iwl_dbgfs_dbg_time_point_write(struct iwl_mvm *mvm,
-					      char *buf, size_t count,
-					      loff_t *ppos)
+static ssize_t iwl_dbgfs_dbg_time_point_write(struct iwl_mvm *mvm, char *buf,
+					      size_t count, loff_t *ppos)
 {
 	u32 timepoint;
 
@@ -1507,22 +1497,19 @@ static ssize_t iwl_dbgfs_dbg_time_point_write(struct iwl_mvm *mvm,
 	_MVM_DEBUGFS_WRITE_FILE_OPS(name, bufsz, struct iwl_mvm)
 #define MVM_DEBUGFS_READ_WRITE_FILE_OPS(name, bufsz) \
 	_MVM_DEBUGFS_READ_WRITE_FILE_OPS(name, bufsz, struct iwl_mvm)
-#define MVM_DEBUGFS_ADD_FILE_ALIAS(alias, name, parent, mode) do {	\
-		debugfs_create_file(alias, mode, parent, mvm,		\
-				    &iwl_dbgfs_##name##_ops);		\
+#define MVM_DEBUGFS_ADD_FILE_ALIAS(alias, name, parent, mode) \
+	do {                                                  \
+		debugfs_create_file(alias, mode, parent, mvm, \
+				    &iwl_dbgfs_##name##_ops); \
 	} while (0)
 #define MVM_DEBUGFS_ADD_FILE(name, parent, mode) \
 	MVM_DEBUGFS_ADD_FILE_ALIAS(#name, name, parent, mode)
 
-static ssize_t
-_iwl_dbgfs_link_sta_wrap_write(ssize_t (*real)(struct ieee80211_link_sta *,
-					       struct iwl_mvm_sta *,
-					       struct iwl_mvm *,
-					       struct iwl_mvm_link_sta *,
-					       char *,
-					       size_t, loff_t *),
-			   struct file *file,
-			   char *buf, size_t buf_size, loff_t *ppos)
+static ssize_t _iwl_dbgfs_link_sta_wrap_write(
+	ssize_t (*real)(struct ieee80211_link_sta *, struct iwl_mvm_sta *,
+			struct iwl_mvm *, struct iwl_mvm_link_sta *, char *,
+			size_t, loff_t *),
+	struct file *file, char *buf, size_t buf_size, loff_t *ppos)
 {
 	struct ieee80211_link_sta *link_sta = file->private_data;
 	struct iwl_mvm_sta *mvmsta = iwl_mvm_sta_from_mac80211(link_sta->sta);
@@ -1532,8 +1519,8 @@ _iwl_dbgfs_link_sta_wrap_write(ssize_t (*real)(struct ieee80211_link_sta *,
 
 	mutex_lock(&mvm->mutex);
 
-	mvm_link_sta = rcu_dereference_protected(mvmsta->link[link_sta->link_id],
-						 lockdep_is_held(&mvm->mutex));
+	mvm_link_sta = rcu_dereference_protected(
+		mvmsta->link[link_sta->link_id], lockdep_is_held(&mvm->mutex));
 	if (WARN_ON(!mvm_link_sta)) {
 		mutex_unlock(&mvm->mutex);
 		return -ENODEV;
@@ -1546,15 +1533,11 @@ _iwl_dbgfs_link_sta_wrap_write(ssize_t (*real)(struct ieee80211_link_sta *,
 	return ret;
 }
 
-static ssize_t
-_iwl_dbgfs_link_sta_wrap_read(ssize_t (*real)(struct ieee80211_link_sta *,
-					      struct iwl_mvm_sta *,
-					      struct iwl_mvm *,
-					      struct iwl_mvm_link_sta *,
-					      char __user *,
-					      size_t, loff_t *),
-			   struct file *file,
-			   char __user *user_buf, size_t count, loff_t *ppos)
+static ssize_t _iwl_dbgfs_link_sta_wrap_read(
+	ssize_t (*real)(struct ieee80211_link_sta *, struct iwl_mvm_sta *,
+			struct iwl_mvm *, struct iwl_mvm_link_sta *,
+			char __user *, size_t, loff_t *),
+	struct file *file, char __user *user_buf, size_t count, loff_t *ppos)
 {
 	struct ieee80211_link_sta *link_sta = file->private_data;
 	struct iwl_mvm_sta *mvmsta = iwl_mvm_sta_from_mac80211(link_sta->sta);
@@ -1564,8 +1547,8 @@ _iwl_dbgfs_link_sta_wrap_read(ssize_t (*real)(struct ieee80211_link_sta *,
 
 	mutex_lock(&mvm->mutex);
 
-	mvm_link_sta = rcu_dereference_protected(mvmsta->link[link_sta->link_id],
-						 lockdep_is_held(&mvm->mutex));
+	mvm_link_sta = rcu_dereference_protected(
+		mvmsta->link[link_sta->link_id], lockdep_is_held(&mvm->mutex));
 	if (WARN_ON(!mvm_link_sta)) {
 		mutex_unlock(&mvm->mutex);
 		return -ENODEV;
@@ -1578,68 +1561,64 @@ _iwl_dbgfs_link_sta_wrap_read(ssize_t (*real)(struct ieee80211_link_sta *,
 	return ret;
 }
 
-#define MVM_DEBUGFS_LINK_STA_WRITE_WRAPPER(name, buflen)		\
-static ssize_t _iwl_dbgfs_link_sta_##name##_write(struct file *file,	\
-					 const char __user *user_buf,	\
-					 size_t count, loff_t *ppos)	\
-{									\
-	char buf[buflen] = {};						\
-	size_t buf_size = min(count, sizeof(buf) -  1);			\
-									\
-	if (copy_from_user(buf, user_buf, buf_size))			\
-		return -EFAULT;						\
-									\
-	return _iwl_dbgfs_link_sta_wrap_write(iwl_dbgfs_##name##_write,	\
-					      file,			\
-					      buf, buf_size, ppos);	\
-}									\
-
-#define MVM_DEBUGFS_LINK_STA_READ_WRAPPER(name)		\
-static ssize_t _iwl_dbgfs_link_sta_##name##_read(struct file *file,	\
-					 char __user *user_buf,		\
-					 size_t count, loff_t *ppos)	\
-{									\
-	return _iwl_dbgfs_link_sta_wrap_read(iwl_dbgfs_##name##_read,	\
-					     file,			\
-					     user_buf, count, ppos);	\
-}									\
-
-#define MVM_DEBUGFS_WRITE_LINK_STA_FILE_OPS(name, bufsz)		\
-MVM_DEBUGFS_LINK_STA_WRITE_WRAPPER(name, bufsz)				\
-static const struct file_operations iwl_dbgfs_link_sta_##name##_ops = {	\
-	.write = _iwl_dbgfs_link_sta_##name##_write,			\
-	.open = simple_open,						\
-	.llseek = generic_file_llseek,					\
-}
+#define MVM_DEBUGFS_LINK_STA_WRITE_WRAPPER(name, buflen)                      \
+	static ssize_t _iwl_dbgfs_link_sta_##name##_write(                    \
+		struct file *file, const char __user *user_buf, size_t count, \
+		loff_t *ppos)                                                 \
+	{                                                                     \
+		char buf[buflen] = {};                                        \
+		size_t buf_size = min(count, sizeof(buf) - 1);                \
+                                                                              \
+		if (copy_from_user(buf, user_buf, buf_size))                  \
+			return -EFAULT;                                       \
+                                                                              \
+		return _iwl_dbgfs_link_sta_wrap_write(                        \
+			iwl_dbgfs_##name##_write, file, buf, buf_size, ppos); \
+	}
 
-#define MVM_DEBUGFS_READ_LINK_STA_FILE_OPS(name)			\
-MVM_DEBUGFS_LINK_STA_READ_WRAPPER(name)					\
-static const struct file_operations iwl_dbgfs_link_sta_##name##_ops = {	\
-	.read = _iwl_dbgfs_link_sta_##name##_read,			\
-	.open = simple_open,						\
-	.llseek = generic_file_llseek,					\
-}
+#define MVM_DEBUGFS_LINK_STA_READ_WRAPPER(name)                                \
+	static ssize_t _iwl_dbgfs_link_sta_##name##_read(                      \
+		struct file *file, char __user *user_buf, size_t count,        \
+		loff_t *ppos)                                                  \
+	{                                                                      \
+		return _iwl_dbgfs_link_sta_wrap_read(                          \
+			iwl_dbgfs_##name##_read, file, user_buf, count, ppos); \
+	}
 
-#define MVM_DEBUGFS_READ_WRITE_LINK_STA_FILE_OPS(name, bufsz)		\
-MVM_DEBUGFS_LINK_STA_READ_WRAPPER(name)					\
-MVM_DEBUGFS_LINK_STA_WRITE_WRAPPER(name, bufsz)				\
-static const struct file_operations iwl_dbgfs_link_sta_##name##_ops = {	\
-	.read = _iwl_dbgfs_link_sta_##name##_read,			\
-	.write = _iwl_dbgfs_link_sta_##name##_write,			\
-	.open = simple_open,						\
-	.llseek = generic_file_llseek,					\
-}
+#define MVM_DEBUGFS_WRITE_LINK_STA_FILE_OPS(name, bufsz)                        \
+	MVM_DEBUGFS_LINK_STA_WRITE_WRAPPER(name, bufsz)                         \
+	static const struct file_operations iwl_dbgfs_link_sta_##name##_ops = { \
+		.write = _iwl_dbgfs_link_sta_##name##_write,                    \
+		.open = simple_open,                                            \
+		.llseek = generic_file_llseek,                                  \
+	}
 
-#define MVM_DEBUGFS_ADD_LINK_STA_FILE_ALIAS(alias, name, parent, mode)	\
-		debugfs_create_file(alias, mode, parent, link_sta,	\
-				    &iwl_dbgfs_link_sta_##name##_ops)
+#define MVM_DEBUGFS_READ_LINK_STA_FILE_OPS(name)                                \
+	MVM_DEBUGFS_LINK_STA_READ_WRAPPER(name)                                 \
+	static const struct file_operations iwl_dbgfs_link_sta_##name##_ops = { \
+		.read = _iwl_dbgfs_link_sta_##name##_read,                      \
+		.open = simple_open,                                            \
+		.llseek = generic_file_llseek,                                  \
+	}
+
+#define MVM_DEBUGFS_READ_WRITE_LINK_STA_FILE_OPS(name, bufsz)                   \
+	MVM_DEBUGFS_LINK_STA_READ_WRAPPER(name)                                 \
+	MVM_DEBUGFS_LINK_STA_WRITE_WRAPPER(name, bufsz)                         \
+	static const struct file_operations iwl_dbgfs_link_sta_##name##_ops = { \
+		.read = _iwl_dbgfs_link_sta_##name##_read,                      \
+		.write = _iwl_dbgfs_link_sta_##name##_write,                    \
+		.open = simple_open,                                            \
+		.llseek = generic_file_llseek,                                  \
+	}
+
+#define MVM_DEBUGFS_ADD_LINK_STA_FILE_ALIAS(alias, name, parent, mode) \
+	debugfs_create_file(alias, mode, parent, link_sta,             \
+			    &iwl_dbgfs_link_sta_##name##_ops)
 #define MVM_DEBUGFS_ADD_LINK_STA_FILE(name, parent, mode) \
 	MVM_DEBUGFS_ADD_LINK_STA_FILE_ALIAS(#name, name, parent, mode)
 
-static ssize_t
-iwl_dbgfs_prph_reg_read(struct file *file,
-			char __user *user_buf,
-			size_t count, loff_t *ppos)
+static ssize_t iwl_dbgfs_prph_reg_read(struct file *file, char __user *user_buf,
+				       size_t count, loff_t *ppos)
 {
 	struct iwl_mvm *mvm = file->private_data;
 	int pos = 0;
@@ -1650,15 +1629,14 @@ iwl_dbgfs_prph_reg_read(struct file *file,
 		return -EINVAL;
 
 	pos += scnprintf(buf + pos, bufsz - pos, "Reg 0x%x: (0x%x)\n",
-		mvm->dbgfs_prph_reg_addr,
-		iwl_read_prph(mvm->trans, mvm->dbgfs_prph_reg_addr));
+			 mvm->dbgfs_prph_reg_addr,
+			 iwl_read_prph(mvm->trans, mvm->dbgfs_prph_reg_addr));
 
 	return simple_read_from_buffer(user_buf, count, ppos, buf, pos);
 }
 
-static ssize_t
-iwl_dbgfs_prph_reg_write(struct iwl_mvm *mvm, char *buf,
-			 size_t count, loff_t *ppos)
+static ssize_t iwl_dbgfs_prph_reg_write(struct iwl_mvm *mvm, char *buf,
+					size_t count, loff_t *ppos)
 {
 	u8 args;
 	u32 value;
@@ -1678,9 +1656,8 @@ iwl_dbgfs_prph_reg_write(struct iwl_mvm *mvm, char *buf,
 	return count;
 }
 
-static ssize_t
-iwl_dbgfs_send_echo_cmd_write(struct iwl_mvm *mvm, char *buf,
-			      size_t count, loff_t *ppos)
+static ssize_t iwl_dbgfs_send_echo_cmd_write(struct iwl_mvm *mvm, char *buf,
+					     size_t count, loff_t *ppos)
 {
 	int ret;
 
@@ -1712,9 +1689,8 @@ static bool iwl_mvm_sniffer_apply(struct iwl_notif_wait_data *notif_data,
 	return true;
 }
 
-static ssize_t
-iwl_dbgfs_he_sniffer_params_write(struct iwl_mvm *mvm, char *buf,
-				  size_t count, loff_t *ppos)
+static ssize_t iwl_dbgfs_he_sniffer_params_write(struct iwl_mvm *mvm, char *buf,
+						 size_t count, loff_t *ppos)
 {
 	struct iwl_notification_wait wait;
 	struct iwl_he_monitor_cmd he_mon_cmd = {};
@@ -1753,14 +1729,13 @@ iwl_dbgfs_he_sniffer_params_write(struct iwl_mvm *mvm, char *buf,
 	 * new configuration (and sent the response, synchronously)
 	 * get mvm->cur_aid correctly set to the new AID.
 	 */
-	iwl_init_notification_wait(&mvm->notif_wait, &wait,
-				   wait_cmds, ARRAY_SIZE(wait_cmds),
-				   iwl_mvm_sniffer_apply, &apply);
+	iwl_init_notification_wait(&mvm->notif_wait, &wait, wait_cmds,
+				   ARRAY_SIZE(wait_cmds), iwl_mvm_sniffer_apply,
+				   &apply);
 
-	ret = iwl_mvm_send_cmd_pdu(mvm,
-				   WIDE_ID(DATA_PATH_GROUP, HE_AIR_SNIFFER_CONFIG_CMD),
-				   0,
-				   sizeof(he_mon_cmd), &he_mon_cmd);
+	ret = iwl_mvm_send_cmd_pdu(
+		mvm, WIDE_ID(DATA_PATH_GROUP, HE_AIR_SNIFFER_CONFIG_CMD), 0,
+		sizeof(he_mon_cmd), &he_mon_cmd);
 
 	/* no need to really wait, we already did anyway */
 	iwl_remove_notification(&mvm->notif_wait, &wait);
@@ -1770,9 +1745,9 @@ iwl_dbgfs_he_sniffer_params_write(struct iwl_mvm *mvm, char *buf,
 	return ret ?: count;
 }
 
-static ssize_t
-iwl_dbgfs_he_sniffer_params_read(struct file *file, char __user *user_buf,
-				 size_t count, loff_t *ppos)
+static ssize_t iwl_dbgfs_he_sniffer_params_read(struct file *file,
+						char __user *user_buf,
+						size_t count, loff_t *ppos)
 {
 	struct iwl_mvm *mvm = file->private_data;
 	u8 buf[32];
@@ -1787,9 +1762,9 @@ iwl_dbgfs_he_sniffer_params_read(struct file *file, char __user *user_buf,
 	return simple_read_from_buffer(user_buf, count, ppos, buf, len);
 }
 
-static ssize_t
-iwl_dbgfs_uapsd_noagg_bssids_read(struct file *file, char __user *user_buf,
-				  size_t count, loff_t *ppos)
+static ssize_t iwl_dbgfs_uapsd_noagg_bssids_read(struct file *file,
+						 char __user *user_buf,
+						 size_t count, loff_t *ppos)
 {
 	struct iwl_mvm *mvm = file->private_data;
 	u8 buf[IWL_MVM_UAPSD_NOAGG_BSSIDS_NUM * ETH_ALEN * 3 + 1];
@@ -1808,22 +1783,18 @@ iwl_dbgfs_uapsd_noagg_bssids_read(struct file *file, char __user *user_buf,
 	return simple_read_from_buffer(user_buf, count, ppos, buf, pos);
 }
 
-static ssize_t
-iwl_dbgfs_ltr_config_write(struct iwl_mvm *mvm,
-			   char *buf, size_t count, loff_t *ppos)
+static ssize_t iwl_dbgfs_ltr_config_write(struct iwl_mvm *mvm, char *buf,
+					  size_t count, loff_t *ppos)
 {
 	int ret;
-	struct iwl_ltr_config_cmd ltr_config = {0};
+	struct iwl_ltr_config_cmd ltr_config = { 0 };
 
 	if (!iwl_mvm_firmware_running(mvm))
 		return -EIO;
 
-	if (sscanf(buf, "%x,%x,%x,%x,%x,%x,%x",
-		   &ltr_config.flags,
-		   &ltr_config.static_long,
-		   &ltr_config.static_short,
-		   &ltr_config.ltr_cfg_values[0],
-		   &ltr_config.ltr_cfg_values[1],
+	if (sscanf(buf, "%x,%x,%x,%x,%x,%x,%x", &ltr_config.flags,
+		   &ltr_config.static_long, &ltr_config.static_short,
+		   &ltr_config.ltr_cfg_values[0], &ltr_config.ltr_cfg_values[1],
 		   &ltr_config.ltr_cfg_values[2],
 		   &ltr_config.ltr_cfg_values[3]) != 7) {
 		return -EINVAL;
@@ -1866,8 +1837,9 @@ static ssize_t iwl_dbgfs_rfi_freq_table_write(struct iwl_mvm *mvm, char *buf,
  * the table; So, need 5 chars for the "freq: " part and each tuple afterwards
  * needs 6 characters for numbers and 5 for the punctuation around.
  */
-#define IWL_RFI_BUF_SIZE (IWL_RFI_LUT_INSTALLED_SIZE *\
-				(5 + IWL_RFI_LUT_ENTRY_CHANNELS_NUM * (6 + 5)))
+#define IWL_RFI_BUF_SIZE              \
+	(IWL_RFI_LUT_INSTALLED_SIZE * \
+	 (5 + IWL_RFI_LUT_ENTRY_CHANNELS_NUM * (6 + 5)))
 
 static ssize_t iwl_dbgfs_rfi_freq_table_read(struct file *file,
 					     char __user *user_buf,
@@ -1890,8 +1862,8 @@ static ssize_t iwl_dbgfs_rfi_freq_table_read(struct file *file,
 	}
 
 	for (i = 0; i < ARRAY_SIZE(resp->table); i++) {
-		pos += scnprintf(buf + pos, IWL_RFI_BUF_SIZE - pos, "%d: ",
-				 resp->table[i].freq);
+		pos += scnprintf(buf + pos, IWL_RFI_BUF_SIZE - pos,
+				 "%d: ", resp->table[i].freq);
 
 		for (j = 0; j < ARRAY_SIZE(resp->table[i].channels); j++)
 			pos += scnprintf(buf + pos, IWL_RFI_BUF_SIZE - pos,
@@ -1909,6 +1881,7 @@ static ssize_t iwl_dbgfs_rfi_freq_table_read(struct file *file,
 MVM_DEBUGFS_READ_WRITE_FILE_OPS(prph_reg, 64);
 
 /* Device wide debugfs entries */
+MVM_DEBUGFS_READ_WRITE_FILE_OPS(id, 20);
 MVM_DEBUGFS_READ_FILE_OPS(ctdp_budget);
 MVM_DEBUGFS_WRITE_FILE_OPS(stop_ctdp, 8);
 MVM_DEBUGFS_WRITE_FILE_OPS(start_ctdp, 8);
@@ -2112,6 +2085,7 @@ void iwl_mvm_dbgfs_register(struct iwl_mvm *mvm)
 
 	spin_lock_init(&mvm->drv_stats_lock);
 
+	MVM_DEBUGFS_ADD_FILE(id, mvm->debugfs_dir, 0644);
 	MVM_DEBUGFS_ADD_FILE(tx_flush, mvm->debugfs_dir, 0200);
 	MVM_DEBUGFS_ADD_FILE(sram, mvm->debugfs_dir, 0600);
 	MVM_DEBUGFS_ADD_FILE(set_nic_temperature, mvm->debugfs_dir, 0600);
@@ -2140,7 +2114,8 @@ void iwl_mvm_dbgfs_register(struct iwl_mvm *mvm)
 	MVM_DEBUGFS_ADD_FILE(rfi_freq_table, mvm->debugfs_dir, 0600);
 
 	if (mvm->fw->phy_integration_ver)
-		MVM_DEBUGFS_ADD_FILE(phy_integration_ver, mvm->debugfs_dir, 0400);
+		MVM_DEBUGFS_ADD_FILE(phy_integration_ver, mvm->debugfs_dir,
+				     0400);
 	MVM_DEBUGFS_ADD_FILE(tas_get_status, mvm->debugfs_dir, 0400);
 #ifdef CONFIG_ACPI
 	MVM_DEBUGFS_ADD_FILE(sar_geo_profile, mvm->debugfs_dir, 0400);
@@ -2178,8 +2153,8 @@ void iwl_mvm_dbgfs_register(struct iwl_mvm *mvm)
 			    &mvm->nvm_prod_blob);
 	debugfs_create_blob("nvm_phy_sku", 0400, mvm->debugfs_dir,
 			    &mvm->nvm_phy_sku_blob);
-	debugfs_create_blob("nvm_reg", S_IRUSR,
-			    mvm->debugfs_dir, &mvm->nvm_reg_blob);
+	debugfs_create_blob("nvm_reg", S_IRUSR, mvm->debugfs_dir,
+			    &mvm->nvm_reg_blob);
 
 	debugfs_create_file("mem", 0600, mvm->debugfs_dir, mvm,
 			    &iwl_dbgfs_mem_ops);
-- 
2.49.0

